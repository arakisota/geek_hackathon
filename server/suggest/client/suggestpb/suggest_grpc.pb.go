// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.1
// source: suggest.proto

package suggestpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Suggest_Suggest_FullMethodName = "/suggest.Suggest/Suggest"
)

// SuggestClient is the client API for Suggest service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SuggestClient interface {
	Suggest(ctx context.Context, in *SuggestRequest, opts ...grpc.CallOption) (*SuggestResponse, error)
}

type suggestClient struct {
	cc grpc.ClientConnInterface
}

func NewSuggestClient(cc grpc.ClientConnInterface) SuggestClient {
	return &suggestClient{cc}
}

func (c *suggestClient) Suggest(ctx context.Context, in *SuggestRequest, opts ...grpc.CallOption) (*SuggestResponse, error) {
	out := new(SuggestResponse)
	err := c.cc.Invoke(ctx, Suggest_Suggest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SuggestServer is the server API for Suggest service.
// All implementations must embed UnimplementedSuggestServer
// for forward compatibility
type SuggestServer interface {
	Suggest(context.Context, *SuggestRequest) (*SuggestResponse, error)
	mustEmbedUnimplementedSuggestServer()
}

// UnimplementedSuggestServer must be embedded to have forward compatible implementations.
type UnimplementedSuggestServer struct {
}

func (UnimplementedSuggestServer) Suggest(context.Context, *SuggestRequest) (*SuggestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Suggest not implemented")
}
func (UnimplementedSuggestServer) mustEmbedUnimplementedSuggestServer() {}

// UnsafeSuggestServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SuggestServer will
// result in compilation errors.
type UnsafeSuggestServer interface {
	mustEmbedUnimplementedSuggestServer()
}

func RegisterSuggestServer(s grpc.ServiceRegistrar, srv SuggestServer) {
	s.RegisterService(&Suggest_ServiceDesc, srv)
}

func _Suggest_Suggest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuggestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuggestServer).Suggest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Suggest_Suggest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuggestServer).Suggest(ctx, req.(*SuggestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Suggest_ServiceDesc is the grpc.ServiceDesc for Suggest service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Suggest_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "suggest.Suggest",
	HandlerType: (*SuggestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Suggest",
			Handler:    _Suggest_Suggest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "suggest.proto",
}
